<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aiden Benner - Waterloo SE 2021</title>
    <description>My personal blog and portfolio.</description>
    <link>http://aidenbenner.github.io/</link>
    <atom:link href="http://aidenbenner.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 04 Dec 2017 13:22:01 -0500</pubDate>
    <lastBuildDate>Mon, 04 Dec 2017 13:22:01 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Test Post</title>
        <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse vel mauris diam. Nam a semper nulla, nec posuere nibh. Aliquam interdum leo ut orci rhoncus consequat. Duis molestie in urna vestibulum vestibulum. Nulla id rhoncus ante. Ut et augue turpis. Nullam a eros risus. Nam ut varius massa. Cras eget molestie purus, ut imperdiet felis. Phasellus libero justo, pharetra vel maximus vel, pharetra eget nisl. Morbi semper mollis leo, sed vulputate quam pharetra a. Aliquam ac felis in nibh rutrum euismod id tincidunt felis. Curabitur eleifend aliquet dignissim. Pellentesque vel congue arcu. Ut imperdiet purus mi, vitae dignissim odio faucibus eget.&lt;/p&gt;

&lt;p&gt;Sed non libero id nibh ornare maximus. Donec dictum fermentum eleifend. Vestibulum non nisi mi. In vehicula nisl in pharetra tincidunt. Donec rhoncus purus vestibulum, aliquam nunc convallis, dignissim dui. Ut laoreet diam ut semper fermentum. Integer id lorem sed diam aliquet mattis. Fusce viverra commodo congue. Praesent facilisis tempor justo eu aliquet. Quisque aliquam libero lacus. Pellentesque ut volutpat lacus. Suspendisse potenti. Sed congue sem consequat nibh interdum tincidunt.&lt;/p&gt;

&lt;p&gt;Morbi velit magna, ullamcorper quis tempor eget, bibendum in eros. Quisque quis lacus mi. Donec molestie lobortis metus nec ornare. Donec tempus interdum tellus, at varius dui dapibus non. Morbi ultrices enim vitae tincidunt dapibus. Donec bibendum purus nec velit pellentesque efficitur. Nulla facilisi. Vestibulum pellentesque risus vel laoreet luctus. Quisque eleifend diam nec purus tincidunt facilisis. Curabitur aliquam molestie justo sit amet gravida. Maecenas convallis dapibus nisl ac dignissim. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Mauris semper orci ac luctus mollis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed consequat ante tincidunt, egestas enim et, hendrerit elit.&lt;/p&gt;

&lt;p&gt;Nam vehicula velit a nunc sagittis, eu sagittis lectus molestie. Ut non purus sagittis, tincidunt enim luctus, mollis neque. Sed dictum ut lectus at rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Duis viverra dolor id erat tincidunt ornare. Suspendisse semper elementum nunc, ut volutpat enim lacinia ut. Nulla dolor quam, tristique at condimentum non, dictum ut massa. Morbi a orci sem. Suspendisse viverra tellus a eros commodo, vitae congue sem vulputate.&lt;/p&gt;

&lt;p&gt;Phasellus dignissim nisi ut rhoncus dictum. Mauris eu porttitor ante. Proin a facilisis risus, eu porttitor ante. In venenatis non purus vitae consequat. Nullam pharetra eu leo ac ultrices. Aenean convallis mi eros, et eleifend urna vulputate mollis. Quisque fermentum sodales tempus. Nullam eget varius dolor. Duis a bibendum elit. Aenean non aliquet ipsum, vel facilisis sem. Praesent faucibus feugiat aliquam. Donec tristique urna justo, ac porttitor arcu viverra sit amet.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 -0400</pubDate>
        <link>http://aidenbenner.github.io/blog/2017/06/01/Test-Post/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/blog/2017/06/01/Test-Post/</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Raytracer</title>
        <description>
</description>
        <pubDate>Tue, 14 Mar 2017 16:17:01 -0400</pubDate>
        <link>http://aidenbenner.github.io/project/2017/03/14/Raytracer/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2017/03/14/Raytracer/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Orbit Assistant</title>
        <description>
</description>
        <pubDate>Tue, 25 Oct 2016 19:17:01 -0400</pubDate>
        <link>http://aidenbenner.github.io/project/2016/10/25/Orbit-Assistant/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/10/25/Orbit-Assistant/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Matrix Utils</title>
        <description>
</description>
        <pubDate>Thu, 20 Oct 2016 16:17:01 -0400</pubDate>
        <link>http://aidenbenner.github.io/project/2016/10/20/Matrix-Utils/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/10/20/Matrix-Utils/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Diamond Square</title>
        <description>
</description>
        <pubDate>Mon, 21 Mar 2016 19:17:01 -0400</pubDate>
        <link>http://aidenbenner.github.io/project/2016/03/21/Diamond-Square/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/03/21/Diamond-Square/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Frc 4334 Robotcode</title>
        <description>
</description>
        <pubDate>Wed, 02 Mar 2016 20:17:01 -0500</pubDate>
        <link>http://aidenbenner.github.io/project/2016/03/02/FRC-4334-Robotcode/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/03/02/FRC-4334-Robotcode/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Vex Nothing But Net</title>
        <description>
</description>
        <pubDate>Wed, 02 Mar 2016 20:17:01 -0500</pubDate>
        <link>http://aidenbenner.github.io/project/2016/03/02/VEX-Nothing-But-Net/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/03/02/VEX-Nothing-But-Net/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Neural Net For Ocr</title>
        <description>&lt;h1 id=&quot;handwritingann&quot;&gt;Handwriting_ANN&lt;/h1&gt;
&lt;p&gt;Convert images of handwriting to digital text using neural networks.
Created for grade 12 Computer Science IB IA.
Implemented using Java and Opencv.&lt;/p&gt;

&lt;h2 id=&quot;program-overview&quot;&gt;Program Overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XI4TMfd.png&quot; alt=&quot;High level program flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The general idea behind the ANN is to receive inputs (in this case pixel intensity values that we have parsed from our
image). Each circle above represents a neuron and each line represents a connection between two neurons. ANN’s are
composed of three types of layers, the input layer, the hidden layers and the output layer. The fundamental unit of the
ANN is the Neuron. The Neuron has a set of weights attached to it each corresponding Neuron in the previous layer
(unless it’s an input layer). Inputs are given to the input layer of the network, the inputs are then feed forward through
the neurons to reach the output layer. Each neuron uses the same activation function, in this case a sigmoid function&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/q7RKTTN.png&quot; alt=&quot;Overview of a neural network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The general idea of the backpropagation algorithm is to ‘backpropagate’ calculated error in the last layer throughout
the network adjusting the weights of each individual neurons by comparing their last output and calculated error
value. Below is the code that changes the weights of each neuron. The new weight is equal to the current error which
is calculated from the product of the error and weight of the nodes ahead of the current and is multiplied by the
learning constants h. The h value is a constant that needs to be tuned, if it is too big, the weights will continue to
overshoot and total error will oscillate around the desired. If the weight is too small it will take too long for the
network to train, and it may not even train at all. It is also sometimes beneficial to change the learning constant
overtime, first starting with a high value to speed up initial change where error is very high, and then slowly
decreasing the learning constant so the network can converge on the ideal weight configuration. After finished the
backpropagation algorithm I tried training it on a sine function in order to debug and to tune the network and learning
constant, and received very positive results (see appendix).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;c1&quot;&gt;//BACKPROP&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biasChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;adjustWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//brings output from forward, delta from last &lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltaWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastInputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltaWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;momentum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltaWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;deltaWeights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deltaWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;biasChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biasChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;momentum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biasChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//System.out.println(delta + &quot; &quot; + weight + &quot; &quot;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDelta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Neuron&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fwdLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fwdLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fwdLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currDelta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;training&quot;&gt;Training&lt;/h2&gt;

&lt;p&gt;Successful training of a sin function to test network&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/WSfWhGs.png&quot; alt=&quot;Training on a sin function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Successful training using character test panel&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/IaHIzbY.png&quot; alt=&quot;Successful preliminary recognition of characters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Tmd88ZO.png&quot; alt=&quot;Successful preliminary recognition 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Character segmentation demonstration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JXKyPYC.png&quot; alt=&quot;Demo of character segmentation&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jan 2016 18:17:01 -0500</pubDate>
        <link>http://aidenbenner.github.io/project/2016/01/12/Neural-Net-for-OCR/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2016/01/12/Neural-Net-for-OCR/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Gravity Sim</title>
        <description>&lt;p&gt;A simulation of gravity between stellar bodies. Written in Java for a grade 11 CS project.&lt;/p&gt;

&lt;p&gt;After inputting the initial parameters, a number of small, medium and large masses are added to the simulation. The bodies then interact through simulation of a graviational force using a user defined gravitational constant. The initial velocity and initial mass is randomly generated for each body.&lt;/p&gt;

&lt;p&gt;Bodies with high mass are identified with red, medium with green and low with blue. Within each mass group, relative mass is determined by size (bigger the circle = the greater the mass).&lt;/p&gt;

&lt;p&gt;A fixed central body can also be added. The value of the gravitational constant is requested on start. A constant &amp;lt; 1 is suggested.&lt;/p&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/z68Dktf.png&quot; alt=&quot;central body with few small&quot; /&gt;
Above shows a fixed central body with around 20 or so smaller bodies orbiting/drifting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ETKukZi.png&quot; alt=&quot;screenshot chaotic&quot; /&gt;
Here is a slightly more hectic scenario with a decent number of red, blue and green masses all drifting freely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/WMhjmPY.png&quot; alt=&quot;screenshot 100+ bodies&quot; /&gt;
100+ small bodies, 20+ medium, 20+ large
This one was a little bit crazy.&lt;/p&gt;

</description>
        <pubDate>Sat, 21 Nov 2015 18:17:01 -0500</pubDate>
        <link>http://aidenbenner.github.io/project/2015/11/21/Gravity-Sim/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2015/11/21/Gravity-Sim/</guid>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>Tetris</title>
        <description>&lt;h1 id=&quot;tetronimo&quot;&gt;Tetronimo&lt;/h1&gt;
&lt;p&gt;A simple block stacking puzzle game. Written in java for a grade 12 CS project.&lt;/p&gt;

&lt;p&gt;Puzzle pieces descend from the top of the screen. Manuever pieces to form full rows to get points.&lt;/p&gt;

&lt;p&gt;Clearing more rows at one time will get you more points.&lt;/p&gt;

&lt;h1 id=&quot;controls&quot;&gt;Controls&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Space - instant drop&lt;/li&gt;
  &lt;li&gt;A     - Rotate CW&lt;/li&gt;
  &lt;li&gt;D     - Rotate CC&lt;/li&gt;
  &lt;li&gt;Arrow Keys - Manuever piece&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;demo&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;Normal gameplay&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/0hz3fIu.png&quot; alt=&quot;Gameplay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Poor stacking&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/y8M62TP.png&quot; alt=&quot;Poor stacking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;About to score&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/epF4KJN.png&quot; alt=&quot;About to score&quot; /&gt;&lt;/p&gt;

&lt;p&gt;About to lose&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Lxi5hZ4.png&quot; alt=&quot;About to lose&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Oct 2015 19:17:01 -0400</pubDate>
        <link>http://aidenbenner.github.io/project/2015/10/24/Tetris/</link>
        <guid isPermaLink="true">http://aidenbenner.github.io/project/2015/10/24/Tetris/</guid>
        
        
        <category>project</category>
        
      </item>
    
  </channel>
</rss>
